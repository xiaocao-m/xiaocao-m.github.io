<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2023/05/21/HTML/"/>
    <url>/2023/05/21/HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><p>HTML指的是超文本标记语言，他是一种用来描述网页的一种语言。<strong>标记语言是一套标记标签</strong></p><h2 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成:"></a>web标准的构成:</h2><table><thead><tr><th align="center">结构</th><th align="left">结构用于对网页元素进行整理和分类(HTML)</th></tr></thead><tbody><tr><td align="center">表现</td><td align="left">表现用于设置网页元素的版式、颜色、大小等外观样式(CSS)</td></tr><tr><td align="center">行为</td><td align="left">行为指的是网页模型的定义以及交互的编写(JAVAscript)</td></tr></tbody></table><h2 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h2><ol><li><p>所有标签都需要写在<code>&lt;  &gt;</code>里面，大部分是成对出现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>   内容    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>单个的标签<code>&lt;br&gt;</code>表示换行</p></li><li><p>标签之间的关系</p><ul><li><p>包含关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h2><p><img src="%E5%AE%9E%E4%BE%8B.png"></p><p>如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DICTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this is a test html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        键盘敲烂，工资过万！<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="test_html.png"></p><h2 id="HTML编辑器"><a href="#HTML编辑器" class="headerlink" title="HTML编辑器"></a>HTML编辑器</h2><p>vscode + open in browser插件</p><h1 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h1><p>标题(Heading)是通过<code>&lt;h1&gt;-&lt;h6&gt;</code>定义的</p><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><p><code>&lt;hr&gt;</code>标签在HTML页面创建水平线</p><p><code>hr</code>元素可用于分割内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this is a test html <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="hr.png"></p><p><strong>注意</strong>:浏览器会自动的在标题的前后添加空行</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--这是一个注释--&gt;</span><br></code></pre></td></tr></table></figure><h1 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>浏览器会自动地在段落的前后添加空行。（</p> 是块级元素）</p><p>在不产生一个新段落的情况下进行换行，使用<code>&lt;br</code>标签</p><h1 id="HTML文本格式化"><a href="#HTML文本格式化" class="headerlink" title="HTML文本格式化"></a>HTML文本格式化</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>这个文本是加粗的<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>这个文本是加粗的<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span>这个文本字体放大<span class="hljs-tag">&lt;/<span class="hljs-name">big</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>这个文本是斜体的<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>这个文本是斜体的<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>这个文本是缩小的<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><h1 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h1><p>想跳哪里跳哪里</p><p>HEML使用<code>&lt;a&gt;</code>来设置超文本链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>提示:</strong> <em>“链接文本”</em> 不必一定是文本。图片或其他 HTML 元素都可以成为链接。</p><h2 id="链接的target属性"><a href="#链接的target属性" class="headerlink" title="链接的target属性"></a>链接的target属性</h2><p>使用 target 属性，你可以定义被链接的文档在何处显示。</p><p>例如在新窗口打开文档</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://xiaocao-m.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="链接的id属性"><a href="#链接的id属性" class="headerlink" title="链接的id属性"></a>链接的id属性</h2><p>id 属性可用于创建一个 HTML 文档书签。</p><p><strong>提示:</strong> 书签不会以任何特殊方式显示，即在 HTML 页面中是不显示的，所以对于读者来说是隐藏的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#C4&quot;</span>&gt;</span>查看章节 4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>章节 1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这边显示该章节的内容……<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>章节 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这边显示该章节的内容……<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>章节 3<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这边显示该章节的内容……<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;C4&quot;</span>&gt;</span>章节 4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这边显示该章节的内容……<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>章节 5<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这边显示该章节的内容……<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="html图片"><a href="#html图片" class="headerlink" title="html图片"></a>html图片</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>img是单标签</p><p>属性：</p><ul><li><p>src : source图片路径，可以是相对、绝对、网络路径</p></li><li><p>alt ： 图片无法正常显示时的代替文本</p></li><li><p>width ： 规定图片的宽度</p></li><li><p>height ：规定图像的高度</p></li><li><p>title ：鼠标停留在图片上时提示的文本</p></li></ul><h1 id="html列表"><a href="#html列表" class="headerlink" title="html列表"></a>html列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>梨<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>波罗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="有序列表.png" width="300"><p>type属性</p><ul><li>1 表示用数字123</li><li>a 表示用小写字母abc</li><li>A 表示用大写字母</li><li>i 表示小写罗马数字i,ii,iii</li><li>I 表示大写罗马数字I，II，III</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GIGCN_paper_note</title>
    <link href="/2023/05/15/GIGCN-paper-note/"/>
    <url>/2023/05/15/GIGCN-paper-note/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Abstract"><a href="#一、Abstract" class="headerlink" title="一、Abstract"></a>一、Abstract</h1><h2 id="1-1-背景-1-："><a href="#1-1-背景-1-：" class="headerlink" title="1.1 背景(1)："></a>1.1 背景(1)：</h2><p>With the development of hyperspectral sensors, accessible hyperspectral images (HSIs) are increasing, and pixel-oriented classification has attracted much attention.</p><h2 id="1-2-问题-2"><a href="#1-2-问题-2" class="headerlink" title="1.2 问题(2):"></a>1.2 问题(2):</h2><p>Recently, graph convolutional networks (GCNs) have been proposed to process graph-structured data in non-Euclidean domains and have been employed in HSI classification.</p><p><code>non-Euclidean</code>非欧几里得的        <code>process</code>处理        <code>domain</code>领域</p><p>==<strong>But</strong>==  most methods based on GCN are hard to sufficiently exploit information of ground objects due to feature aggregation.</p><p><code>exploit </code>利用</p><h2 id="1-3-propose-5"><a href="#1-3-propose-5" class="headerlink" title="1.3 propose(5)"></a>1.3 propose(5)</h2><p>==To solve this issue,==in this article, we proposed a graph-in-graph (GiG) model and a related GiG convolutional network (GiGCN) for HSI classification from a superpixel viewpoint.</p><p><code>viewpoint</code>角度</p><p>The GiG representation covers information inside and outside superpixels, respectively, corresponding to the local and global characteristics of ground objects.</p><p>这句话机翻的不是特别准确，意思是，GℹG表示了超像素的内部和外部信息，这两个信息分别对应的是地面物体的局部特征和全局特征。        <code>respectively</code>分别地，各自地</p><p>==Concretely==, after segmenting HSI into disjoint superpixels, each one is converted to an internal graph. Meanwhile, an external graph is constructed according to the spatial adjacent relationships among superpixels. Significantly, each node in the external graph embeds a corresponding internal graph, forming the so-called GiG structure.</p><p>这三句是细说创新点，每个超像素转换成一个内部图，根据超像素之间的相邻关系构建外部图，再将内部图嵌入到外部图，这就是GiG结构。</p><p>Then, GiGCN composed of internal and External graph convolution (EGC) is designed to extract hierarchical features and integrate them into multiple scales, improving the discriminability of GiGCN.</p><p>GiG + 卷积 forming GiGCN</p><h2 id="1-4-结果-1"><a href="#1-4-结果-1" class="headerlink" title="1.4 结果(1)"></a>1.4 结果(1)</h2><p>Experiment results on four benchmark datasets demonstrate that our proposed method is effective and feasible for HSI classification with limited labeled samples.</p><p><code>benchmark</code>基准、参照        <code>demonstrate</code>证明、证实        <code>feasible</code>可行的、可用的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GiGCN代码笔记</title>
    <link href="/2023/05/09/GiGCN%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/09/GiGCN%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、module"><a href="#一、module" class="headerlink" title="一、module"></a>一、module</h1><h1 id="二、train"><a href="#二、train" class="headerlink" title="二、train"></a>二、train</h1><h2 id="1-argparse包"><a href="#1-argparse包" class="headerlink" title="1. argparse包"></a>1. argparse包</h2><h2 id="2-configparser包"><a href="#2-configparser包" class="headerlink" title="2. configparser包"></a>2. configparser包</h2><p>configparser是用来读取配置文件（<code>.ini</code>）的包</p><p><strong>configParser常用方法</strong>:</p><ol><li>返回配置文件中节序列<code>config.sections()</code></li><li>返回某个项目中的所有键的序列<code>config.optins(section)</code></li><li>返回section节中，option的键值<code>config.get(section, option)</code></li><li>添加一个配置文件节点(str)<code>config.add_section(str)</code></li><li>设置section节点中，键名为option的值(val)<code>config.set(section,option,val)</code></li><li>写入配置文件<code>config.write(obj_file)</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 先初始化，使用ConfigParser()首选要初始化实例</span><br><span class="hljs-keyword">import</span> configparser<br>config = configparser.ConfigParser()<br><span class="hljs-comment"># 读取配置文件</span><br>config.read(<span class="hljs-string">&#x27;./dataInfo.ini&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">dataInfo.init的内容如下：</span><br><span class="hljs-string"></span><br><span class="hljs-string">[PaviaU]# 序列名</span><br><span class="hljs-string">data_key = paviaU# option = 值</span><br><span class="hljs-string">gt_key = paviaU_gt</span><br><span class="hljs-string">band_begin = 430</span><br><span class="hljs-string">band_end = 860</span><br><span class="hljs-string">band = 103</span><br><span class="hljs-string">h = 610</span><br><span class="hljs-string">w = 340</span><br><span class="hljs-string">nc = 9</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Salinas]</span><br><span class="hljs-string">data_key = salinas_corrected</span><br><span class="hljs-string">gt_key = salinas_gt</span><br><span class="hljs-string">band_begin = 200</span><br><span class="hljs-string">band_end = 2400</span><br><span class="hljs-string">band = 204</span><br><span class="hljs-string">h = 512</span><br><span class="hljs-string">w = 217</span><br><span class="hljs-string">nc = 16</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 返回所有序列</span><br>config.options(section)<br><span class="hljs-string">&quot;&quot;&quot;输出为</span><br><span class="hljs-string">[&#x27;PaviaU&#x27;,</span><br><span class="hljs-string"> &#x27;Salinas&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 返回section节中，option的键值config.get(section, option)</span><br>config.get(<span class="hljs-string">&#x27;PaviaU&#x27;</span>, <span class="hljs-string">&#x27;band&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;输出为</span><br><span class="hljs-string">&#x27;103&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-visdom包监听多个数据"><a href="#3-visdom包监听多个数据" class="headerlink" title="3. visdom包监听多个数据"></a>3. visdom包监听多个数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pyth"># 导入包<br>import time<br><br>import numpy as np<br>from visdom import Visdom<br># 必须要实例化<br>viz = Visdom()<br># 在训练前初始化窗口信息<br>viz.line(Y=[[0.,0.]], # Y的第一个坐标,注意这里的Y又用一个中括号括起来<br>         X=[0], # X的第一个坐标<br>         win=&#x27;train_loss&#x27;, # 窗口的name<br>         opts=dict(title=&#x27;train_loss&#x27;) # 图像的标例<br>)<br># 在训练过程中更新数据<br>for epoch in range(10):<br>    # 随机获取一个loss<br>    loss = 0.2*np.random.randn()+1<br>    acc = 0.1*np.random.randn()+0.5<br>    # 记录loss<br>    viz.line([[loss,acc]],[epoch], win=&#x27;train_loss&#x27;, update=&#x27;append&#x27;)<br>    time.sleep(0.5)<br></code></pre></td></tr></table></figure><p>output:</p><img src="visdom.png" width="500"><h2 id="4-sklearn-preprocessing数据预处理"><a href="#4-sklearn-preprocessing数据预处理" class="headerlink" title="4. sklearn.preprocessing数据预处理"></a>4. sklearn.preprocessing数据预处理</h2><h3 id="4-1-Z-Score标准化（zero-mean-normalization）"><a href="#4-1-Z-Score标准化（zero-mean-normalization）" class="headerlink" title="4.1 Z-Score标准化（zero-mean normalization）"></a>4.1 Z-Score标准化（zero-mean normalization）</h3><p>也叫标准差标准化。将数据按属性（按列）减去均值，后除以均方根。提高了数据可比性，同时削弱了数据解释性，是用的最多的数据的标准化方法。输出：每个属性（梅列）均值为0，方差为1，呈正态分布。</p><p>公式为：<br>$$<br>\frac{X-mean}{std}<br>$$</p><p>实现</p><ol><li><code>sklearn.preprocessing.scale</code></li><li><code>sklearn.preprocessing.StandardScaler</code></li></ol><h3 id="4-2-最小最大值标准化-minmax-scale"><a href="#4-2-最小最大值标准化-minmax-scale" class="headerlink" title="4.2 最小最大值标准化(minmax_scale)"></a>4.2 最小最大值标准化(minmax_scale)</h3><p>公式：将数据缩放到一定范围<br>$$<br>X = \frac{x-min}{max-min}<br>$$<br>使用原因：</p><ul><li>对于方差非常小的属性可以增强其稳定性。有时数据集的标准差非常非常小，有时数据中有很多很多零（稀疏数据）需要保存住０元素。</li><li>维持稀疏矩阵中为0的条目</li></ul><p>缺点：</p><ul><li>当数据出现新的最大最小值时，需要重来一遍。</li><li>若数值集中且某个数值很大，则规范化后各值接近于0，并且将会相差不大。（如：100、102、108、20001）</li></ul><p>实现：</p><ul><li><code>sklearn.preprocessing.minmax_scale</code></li><li><code>sklearn.preprocessing.MinMaxScaler</code></li></ul><h2 id="5-os-path"><a href="#5-os-path" class="headerlink" title="5. os.path"></a>5. os.path</h2><h3 id="5-1-os-path-join"><a href="#5-1-os-path-join" class="headerlink" title="5.1 os.path.join"></a>5.1 os.path.join</h3><p>用来路径拼接文件路径，可以传入多个路径，路径之间会自动添加‘/’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>data = <span class="hljs-string">&#x27;./data&#x27;</span><br>path = os.path.join(data, <span class="hljs-string">&#x27;rgb&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>path<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;./data/rgb/a&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-os-path-exists"><a href="#5-2-os-path-exists" class="headerlink" title="5.2 os.path.exists()"></a>5.2 os.path.exists()</h3><p>判断括号里的文件或者文件路径是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">impor os<br>bool_path= os.path.exists(<span class="hljs-string">&#x27;a.py&#x27;</span>)<br>bool_path<br><span class="hljs-comment"># 存在则返回True,不存在则返回False</span><br></code></pre></td></tr></table></figure><h2 id="6-form-PIL-import-Image"><a href="#6-form-PIL-import-Image" class="headerlink" title="6. form PIL import Image"></a>6. form PIL import Image</h2><p>Python Imaging Library(PIL)支持常见的图像格式，常用于操作二维像素点、线、文字，以及对现有图片进行缩放、变形、通道处理，可以实现创建缩略图、转换文件格式、打印图像、转换图片编码格式、比较图片差异等操作。</p><h3 id="6-1-PIL的Image模块"><a href="#6-1-PIL的Image模块" class="headerlink" title="6.1 PIL的Image模块"></a>6.1 PIL的Image模块</h3><p>用途：</p><p>提供一个与模块同名的类。用来表示一个PIL图像。这个模块同时提供一些工厂函数，包括从文件读取图像的函数及创建新图像的函数</p><ol><li>Image 方法读取、显示图像</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>im=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data/rgb/PaviaU_rgb.jpg&#x27;</span>)<br><span class="hljs-built_in">print</span>(im.width)<br><span class="hljs-built_in">print</span>(im.height)<br><span class="hljs-built_in">print</span>(im.mode)<br>im.show()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">340<br>610<br>RGB<br></code></pre></td></tr></table></figure><img src="PU.png"  width="340"  height = "610" /><ol start="2"><li>Image方法将图像与ndarray数组相互转换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>im=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data/rgb/PaviaU_rgb.jpg&#x27;</span>)<br>img = np.array(im)<br><span class="hljs-built_in">print</span>(im)<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-built_in">print</span>(img.shape)<br>img2 = Image.fromarray(np.uint8(img))<span class="hljs-comment"># 注意这里要转换一下</span><br>img2.show()<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=340x610 at 0x7F3B06C6EBE0&gt;<br>[[[ 8 17 22]<br>  [ 7 16 23]<br>  [ 5 12 20]<br>  ...<br>  [43 44 26]<br>  [44 45 27]<br>  [41 42 24]]<br><br> [[11 20 27]<br>  [ 5 12 20]<br>  [ 0  6 14]<br>  ...<br>  (610, 340, 3)<br></code></pre></td></tr></table></figure><p>可以看出使用<code>Image.open()</code>读取图像后的格式为PIL的专属格式，<code>np.array()</code>以后转换为像素值数组</p><h2 id="7-math方法"><a href="#7-math方法" class="headerlink" title="7. math方法"></a>7. math方法</h2><ul><li>math.round(a, b)对a保留b位小数</li><li>math.ceil()向上取整</li><li>math.floor()向下取整</li></ul><h2 id="8-skimage-segementation-slic超像素分割"><a href="#8-skimage-segementation-slic超像素分割" class="headerlink" title="8. skimage.segementation.slic超像素分割"></a>8. skimage.segementation.slic超像素分割</h2><p>skimage作为图像处理库，包括多种图像分割算法。其中超像素slic目前表现较好.</p><p><code>slic(img_array, n_segements, compactness)</code></p><p>参数：</p><ul><li>img_array : 2D, 3D or 4D ndarray</li><li>n_segement : 分割输出图像中标签的（近似）数量。</li><li>compactness : 平衡颜色接近度和空间接近度。值越大相邻边的权重就越大。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> skimage.segmentation <span class="hljs-keyword">import</span> slic, mark_boundaries<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 读取图像</span><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data/rgb/PaviaU_rgb.jpg&#x27;</span>)<br><span class="hljs-comment"># 转换为数组</span><br>img = np.array(img)<br><span class="hljs-comment"># 分割</span><br>seg = slic(img, n_segments=<span class="hljs-number">100</span>, compactness=<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(seg.shape)<br><span class="hljs-comment"># 将原图像分割的边界结合到一张图上</span><br>out = mark_boundaries(img, seg)<br><span class="hljs-comment"># 数据经过了归一化处理，要回到原来的像素值</span><br>out = out * <span class="hljs-number">255</span><br><span class="hljs-comment"># 数组转换为PIL格式图像并显示</span><br>img1 = Image.fromarray(np.uint8(out))<span class="hljs-comment"># 该方法不支持float32格式数据，转换为uint8</span><br>img1.show()<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(610, 340)<br><span class="hljs-comment"># typora设置图片格式</span><br>&lt;img src=<span class="hljs-string">&quot;path&quot;</span> height=<span class="hljs-string">&quot; &quot;</span> width=<span class="hljs-string">&quot; &quot;</span> align=left /&gt;<br></code></pre></td></tr></table></figure><img src="SLIC.PNG" height="610" width="340" align=center><h1 id="三、utils"><a href="#三、utils" class="headerlink" title="三、utils"></a>三、utils</h1><h2 id="1-cv2"><a href="#1-cv2" class="headerlink" title="1. cv2"></a>1. cv2</h2><h3 id="1-1-cv2不提示相关函数问题"><a href="#1-1-cv2不提示相关函数问题" class="headerlink" title="1.1 cv2不提示相关函数问题"></a>1.1 cv2不提示相关函数问题</h3><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install opencv-contrib-python==4.5.5.64<br></code></pre></td></tr></table></figure><p>适用于:python3.7 python3.8 python3.9解释器</p><h3 id="1-2-cv2-dilate"><a href="#1-2-cv2-dilate" class="headerlink" title="1.2 cv2.dilate()"></a>1.2 cv2.dilate()</h3><p>cv2.dilate()膨胀：将前景物体变大，理解成将图像断开裂缝变小（在图片上画上黑色印记，印记越来越小）</p><h2 id="2-np-nonzero-a"><a href="#2-np-nonzero-a" class="headerlink" title="2. np.nonzero(a)"></a>2. np.nonzero(a)</h2><p>返回数组<code>a</code>中非0元素的索引(两个数组)，如果该数组为bool数组，则返回True的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>     [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>     [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    ]<br>np.nonzero(a)<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(array([0, 1, 2]), array([2, 0, 1]))<br></code></pre></td></tr></table></figure><p>第一个数组为行对应的非0元素索引，第二个数组为列对应的非0元素索引。即：</p><p><code>(0, 2), (1, 0), (2, 1)</code>, 那如何像这样输出索引呢？用<code>zip(*)</code></p><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>     [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>     [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    ]<br>indx = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(*np.nonzero(a))) <span class="hljs-comment"># zip后数据变为zip类型，用list转换成列表</span><br>indx<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[(0, 2), (1, 0), (2, 1)]<br></code></pre></td></tr></table></figure><h2 id="3-np-unique-a"><a href="#3-np-unique-a" class="headerlink" title="3. np.unique(a)"></a>3. np.unique(a)</h2><p>由小到大返回a中无重复的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.unique(seg)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">type</span>(a)<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[   1    2    3 ... 2013 2014 2015]<br>numpy.ndarray<br></code></pre></td></tr></table></figure><h2 id="4-np-full"><a href="#4-np-full" class="headerlink" title="4. np.full()"></a>4. np.full()</h2><p><code>np.full(shape, fill_value, dtype)</code></p><p>Return a new array of given shape and type, filled with fill_value</p><p>返回一个给定形状和类型的新数组，数组里面的值为fill_value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.full(shape=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),fill_value=-<span class="hljs-number">1</span>,dtype=np.int32)<br>a<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[[-1 -1 -1 -1 -1]<br> [-1 -1 -1 -1 -1]<br> [-1 -1 -1 -1 -1]<br> [-1 -1 -1 -1 -1]<br> [-1 -1 -1 -1 -1]]<br></code></pre></td></tr></table></figure><h1 id="四、TrainTestSpilt"><a href="#四、TrainTestSpilt" class="headerlink" title="四、TrainTestSpilt"></a>四、TrainTestSpilt</h1><h2 id="1-a-ravel"><a href="#1-a-ravel" class="headerlink" title="1. a.ravel()"></a>1. a.ravel()</h2><p>将数组a展平到一维(一行一行来)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.ravel().shape)<span class="hljs-comment"># 其实是一个列</span><br>a.ravel()<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[[ 0.68311515  0.61541106  0.29958465]<br> [ 0.59864375 -0.44822573  0.52080079]<br> [-0.41985846 -0.94098097  1.23171998]]<br>(9,)<br>[ 0.596536   -0.18750525 -0.73556853 -0.59429671 -0.29061327  0.75020979<br>  0.21813552  0.2318064   0.50236014]<br><br></code></pre></td></tr></table></figure><h2 id="2-np-zeros-like-a"><a href="#2-np-zeros-like-a" class="headerlink" title="2. np.zeros_like(a)"></a>2. np.zeros_like(a)</h2><p>Return an array of zeros with the same shape and type as a given array.</p><p>返回形状为a.shape的全0数组</p><h2 id="3-random-sample-sequences-K"><a href="#3-random-sample-sequences-K" class="headerlink" title="3. random.sample(sequences, K)"></a>3. random.sample(sequences, K)</h2><p>从序列sequenxes中随机获取指定长度K的片断。sample函数不会修改原有序列。 如果k大于sequence元素个数的话会报错。</p><h1 id="五、Trainer"><a href="#五、Trainer" class="headerlink" title="五、Trainer"></a>五、Trainer</h1><h2 id="5-1-tqdm"><a href="#5-1-tqdm" class="headerlink" title="5.1 tqdm"></a>5.1 tqdm</h2><p><code>Tqdm </code>是 <code>Python</code> 进度条库，可以在 <code>Python </code>长循环中添加一个进度提示信息。用户只需要封装任意的迭代器，是一个快速、扩展性强的进度条工具库。</p><h2 id="5-2-format"><a href="#5-2-format" class="headerlink" title="5.2 format"></a>5.2 format</h2><p>format是Python中用于格式化字符串的方法。它可以将变量或常量插入到字符串中，并按照指定的格式进行输出。使用format方法可以使代码更加简洁和易读。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;xiaoming&#x27;</span><br>age = <span class="hljs-number">18.366666</span><br><span class="hljs-comment"># 不指定位置则按顺序来</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;My name is &#123;&#125;, I am &#123;&#125; years old&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br><span class="hljs-comment"># 指定位置,注意从0开始</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;My name is &#123;0&#125;, I am &#123;1:.2f&#125; years old, &#123;0&#125; is a good boy.&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br><span class="hljs-comment"># 还可以在花括号中使用冒号来指定输出格式</span><br>num = <span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;保留两位小数：&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(num))<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">My name is xiaoming, I am 18.366666 years old<br>My name is xiaoming, I am 18.37 years old, xiaoming is a good boy.<br>保留两位小数：3.14<br></code></pre></td></tr></table></figure><h2 id="5-3-tensor在CPU、GPU、numpy之间相互转换"><a href="#5-3-tensor在CPU、GPU、numpy之间相互转换" class="headerlink" title="5.3 tensor在CPU、GPU、numpy之间相互转换"></a>5.3 tensor在CPU、GPU、numpy之间相互转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pyt"># 指定GPU<br>device = torch.device(&#x27;cuda&#x27; if torch.cuda.is_available() else &#x27;cpu&#x27;)<br></code></pre></td></tr></table></figure><p>CPU tensor convert to GPU tensor</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">a = a.cuda()<br></code></pre></td></tr></table></figure><p>GPU tensor convert to CPU tensor</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">a = a.cpu()<br></code></pre></td></tr></table></figure><p>numpy to CPU tensor</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">a = torch.form_numpy(a)<br></code></pre></td></tr></table></figure><p>CPU tensor to numpy</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">a = a.numpy()<br></code></pre></td></tr></table></figure><p><strong>GPU张量不能直接转换为numpy数组，必须先转到CPU</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">a.cpu().numpy()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code_notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HybirdSN HSI classification</title>
    <link href="/2023/05/08/HybirdSN-HSI-classification/"/>
    <url>/2023/05/08/HybirdSN-HSI-classification/</url>
    
    <content type="html"><![CDATA[<h1 id="一、模型结构"><a href="#一、模型结构" class="headerlink" title="一、模型结构"></a>一、模型结构</h1><p>原始数据-&gt;PCA降维-&gt;三层3DCNN-&gt;view数据到2D卷积能用的格式-&gt;一层2DCNN-&gt;fc+Dropout-&gt;outputs</p><p><img src="0%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.png"></p><p>具体网络参数如下：</p><p><img src="0%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0.png"></p><h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="2-1-流程"><a href="#2-1-流程" class="headerlink" title="2.1 流程"></a>2.1 流程</h2><ol><li>定义模型</li><li>数据预处理</li><li>构建Dataset and DataLoader</li><li>定义损失函数和优化器</li><li>定义训练和测试函数</li><li>结果处理</li></ol><h2 id="2-2-定义模型"><a href="#2-2-定义模型" class="headerlink" title="2.2 定义模型"></a>2.2 定义模型</h2><p>在init中定义了conv3d、conv2d和fc块，然后在forward中定义网络前向传播的顺序。</p><p>==两点注意==：三维卷积后的数据在进行二维卷积之前要进行数据变换、全连接层前的数据变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HybirdSN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">16</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.conv3d = nn.Sequential(<br>            nn.Conv3d(in_channels, out_channels=<span class="hljs-number">8</span>, kernel_size=(<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)),<br>            nn.ReLU(),<br>            nn.Conv3d(in_channels=<span class="hljs-number">8</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)),<br>            nn.ReLU(),<br>            nn.Conv3d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)),<br>            nn.ReLU()<br>        )<br><br>        self.conv2d = nn.Sequential(<br>            nn.Conv2d(in_channels=<span class="hljs-number">18</span>*<span class="hljs-number">32</span>, out_channels=<span class="hljs-number">64</span>, kernel_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)),<br>            nn.ReLU()<br>        )<br><br>        self.fc = nn.Sequential(<br>            nn.Linear(in_features=<span class="hljs-number">17</span>*<span class="hljs-number">17</span>*<span class="hljs-number">64</span>, out_features=<span class="hljs-number">256</span>),<br>            nn.ReLU(),<br>            nn.Dropout(p=<span class="hljs-number">0.4</span>),<br>            nn.Linear(in_features=<span class="hljs-number">256</span>, out_features=<span class="hljs-number">128</span>),<br>            nn.ReLU(),<br>            nn.Dropout(p=<span class="hljs-number">0.4</span>),<br>            nn.Linear(<span class="hljs-number">128</span>, out_channels)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv3d(x)<br>        <span class="hljs-comment"># 将经过3D卷积后的五维数据处理成2D卷积所需要的四维数据</span><br>        x = x.view(-<span class="hljs-number">1</span>, x.size()[<span class="hljs-number">1</span>]*x.size()[<span class="hljs-number">2</span>], x.size()[<span class="hljs-number">3</span>], x.size()[<span class="hljs-number">4</span>])<br>        x = self.conv2d(x)<br>        x = x.view(x.size()[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>)<br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x<br><span class="hljs-comment"># 实例化</span><br>mynet = HybirdSN()<br>mynet.cuda()<br><span class="hljs-comment"># 输出网络结构,这里随便给定一个符合格式的输入看网络能跑通不</span><br><span class="hljs-comment"># summary(mynet, (256, 1,30,25,25))</span><br></code></pre></td></tr></table></figure><p>输出的网络结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">==========================================================================================<br>Layer (<span class="hljs-built_in">type</span>:depth-idx)                   Output Shape              Param <span class="hljs-comment">#</span><br>==========================================================================================<br>HybirdSN                                 [256, 16]                 --<br>├─Sequential: 1-1                        [256, 32, 18, 19, 19]     --<br>│    └─Conv3d: 2-1                       [256, 8, 24, 23, 23]      512<br>│    └─ReLU: 2-2                         [256, 8, 24, 23, 23]      --<br>│    └─Conv3d: 2-3                       [256, 16, 20, 21, 21]     5,776<br>│    └─ReLU: 2-4                         [256, 16, 20, 21, 21]     --<br>│    └─Conv3d: 2-5                       [256, 32, 18, 19, 19]     13,856<br>│    └─ReLU: 2-6                         [256, 32, 18, 19, 19]     --<br>├─Sequential: 1-2                        [256, 64, 17, 17]         --<br>│    └─Conv2d: 2-7                       [256, 64, 17, 17]         331,840<br>│    └─ReLU: 2-8                         [256, 64, 17, 17]         --<br>├─Sequential: 1-3                        [256, 16]                 --<br>│    └─Linear: 2-9                       [256, 256]                4,735,232<br>│    └─ReLU: 2-10                        [256, 256]                --<br>│    └─Dropout: 2-11                     [256, 256]                --<br>│    └─Linear: 2-12                      [256, 128]                32,896<br>│    └─ReLU: 2-13                        [256, 128]                --<br>│    └─Dropout: 2-14                     [256, 128]                --<br>│    └─Linear: 2-15                      [256, 16]                 2,064<br>==========================================================================================<br>Total params: 5,122,176<br>Trainable params: 5,122,176<br>Non-trainable params: 0<br>Total mult-adds (G): 63.53<br>==========================================================================================<br>Input size (MB): 19.20<br>Forward/backward pass size (MB): 961.58<br>Params size (MB): 20.49<br>Estimated Total Size (MB): 1001.27<br></code></pre></td></tr></table></figure><h2 id="2-3-数据预处理"><a href="#2-3-数据预处理" class="headerlink" title="2.3 数据预处理"></a>2.3 数据预处理</h2><p>==疑问==：这里代码是将一个样本周围的像素提取来代替该样本，但是如果提取的一个patch内包含测试样本的话，是否造成了测试集的泄漏？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># PCA降维</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">HSI_PCA</span>(<span class="hljs-params">X, num_components</span>):<br>    newX = np.reshape(X, (-<span class="hljs-number">1</span>, X.shape[<span class="hljs-number">2</span>]))<br>    pca = PCA(n_components=num_components, whiten=<span class="hljs-literal">True</span>)<br>    newX = pca.fit_transform(newX)<br>    newX = np.reshape(newX, (X.shape[<span class="hljs-number">0</span>], X.shape[<span class="hljs-number">0</span>], num_components))<br>    <span class="hljs-keyword">return</span> newX<br><br><span class="hljs-comment"># 对单个像素周围提取 patch 时，边缘像素就无法取了，因此，给这部分像素进行 padding 操作</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padWithZeros</span>(<span class="hljs-params">X, margin=<span class="hljs-number">2</span></span>):<br>    newX = np.zeros((X.shape[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*margin, X.shape[<span class="hljs-number">1</span>]+<span class="hljs-number">2</span>*margin, X.shape[<span class="hljs-number">2</span>]))<br>    x_offset = margin<br>    y_offset = margin<br>    newX[x_offset:X.shape[<span class="hljs-number">0</span>] + x_offset, y_offset:X.shape[<span class="hljs-number">1</span>]+y_offset, :] = X<br>    <span class="hljs-keyword">return</span> newX<br><br><span class="hljs-comment"># 在每个像素周围提取patch</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createImageCubes</span>(<span class="hljs-params">X, y, windowsize=<span class="hljs-number">5</span>, removeZeroLabels=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-comment"># 给X做padding</span><br>    margin = <span class="hljs-built_in">int</span>((windowsize - <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>    zeroPaddedX = padWithZeros(X,margin=margin)<br>    <span class="hljs-comment"># split patches</span><br>    patchData = np.zeros((X.shape[<span class="hljs-number">0</span>]*X.shape[<span class="hljs-number">1</span>], windowsize,windowsize, X.shape[<span class="hljs-number">2</span>]))<br>    patchLabels = np.zeros((X.shape[<span class="hljs-number">0</span>] * X.shape[<span class="hljs-number">1</span>]))<br>    patchIndex = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(margin, zeroPaddedX.shape[<span class="hljs-number">0</span>]-margin):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(margin, zeroPaddedX.shape[<span class="hljs-number">1</span>]-margin):<br>            patch = zeroPaddedX[r-margin:r+margin+<span class="hljs-number">1</span>, c-margin:c+margin+<span class="hljs-number">1</span>]<br>            patchData[patchIndex, :,:,:] = patch<br>            patchLabels[patchIndex] = y[r-margin, c-margin]<br>            patchIndex += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> removeZeroLabels:<br>        patchData = patchData[patchLabels&gt;<span class="hljs-number">0</span>,:,:,:]<br>        patchLabels = patchLabels[patchLabels&gt;<span class="hljs-number">0</span>]<br>        patchLabels -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> patchData, patchLabels<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">splitTrainTestSet</span>(<span class="hljs-params">X, y, testRatio, randomState=<span class="hljs-number">345</span></span>):<br>    X_train, X_test, y_train, y_test =           train_test_split(X,y,test_size=testRatio,random_state=randomState)<br>    <span class="hljs-keyword">return</span> X_train, X_test, y_train, y_test<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AA_andEachClassAccuracy</span>(<span class="hljs-params">confusion_matrix</span>):<br>    counter = confusion_matrix.shape[<span class="hljs-number">0</span>]<br>    list_diag = np.diag(confusion_matrix)<br>    list_raw_sum = np.<span class="hljs-built_in">sum</span>(confusion_matrix, axis=<span class="hljs-number">1</span>)<br>    each_acc = np.nan_to_num(truediv(list_diag, list_raw_sum))<br>    average_acc = np.mean(each_acc)<br>    <span class="hljs-keyword">return</span> each_acc, average_acc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reports</span>(<span class="hljs-params">y_pred, y_test</span>):<br>    oa = accuracy_score(y_test, y_pred)<br>    confusion = confusion_matrix(y_test, y_pred)<br>    each_acc, aa = AA_andEachClassAccuracy(confusion)<br>    kappa = cohen_kappa_score(y_test, y_pred)<br><br>    <span class="hljs-keyword">return</span> oa, each_acc, aa, kappa<br></code></pre></td></tr></table></figure><h2 id="2-4-构建Dataset-and-DataLoader"><a href="#2-4-构建Dataset-and-DataLoader" class="headerlink" title="2.4 构建Dataset and DataLoader"></a>2.4 构建Dataset and DataLoader</h2><p>在pytorch中，图像数据的预处理一般是通过Dataset 和 DataLoader来完成的.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python">X = sio.loadmat(<span class="hljs-string">&#x27;./dataset/Indian_pines_corrected.mat&#x27;</span>)[<span class="hljs-string">&#x27;indian_pines_corrected&#x27;</span>]<br>Y = sio.loadmat(<span class="hljs-string">&#x27;./dataset/Indian_pines_gt.mat&#x27;</span>)[<span class="hljs-string">&#x27;indian_pines_gt&#x27;</span>]<br><br>class_num = <span class="hljs-number">16</span><br>test_ratio = <span class="hljs-number">0.70</span><br>patch_size = <span class="hljs-number">25</span><br>pca_components = <span class="hljs-number">30</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;HSI data shape:&#x27;</span>, X.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Label shape:&#x27;</span>, Y.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n... ...PCA... ...&#x27;</span>)<br>X_pca = HSI_PCA(X, num_components=pca_components)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n... ... create data cubes ... ...&#x27;</span>)<br>X_pca, y = createImageCubes(X_pca, Y, windowsize=patch_size)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data cube X shape: &#x27;</span>, X_pca.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data cube y shape: &#x27;</span>, y.shape)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n... ... create train &amp; test data ... ...&#x27;</span>)<br>Xtrain, Xtest, ytrain, ytest = splitTrainTestSet(X_pca, y, test_ratio)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Xtrain shape: &#x27;</span>, Xtrain.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Xtest  shape: &#x27;</span>, Xtest.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ytrain  shape: &#x27;</span>, ytrain.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ytest  shape: &#x27;</span>, ytest.shape)<br><br><br><span class="hljs-comment"># 改变 Xtrain, Ytrain 的形状,将数据升到五维</span><br>Xtrain = Xtrain.reshape(-<span class="hljs-number">1</span>, patch_size, patch_size, pca_components, <span class="hljs-number">1</span>)<br>Xtest  = Xtest.reshape(-<span class="hljs-number">1</span>, patch_size, patch_size, pca_components, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before transpose: Xtrain shape: &#x27;</span>, Xtrain.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before transpose: Xtest  shape: &#x27;</span>, Xtest.shape)<br><br><span class="hljs-comment"># 为了适应 pytorch 结构，数据要做 transpose</span><br><span class="hljs-comment"># 这里是因为pytorch的卷积核结构为(int_channels, 高，长，宽),高对应的就是输入的特征维度</span><br><span class="hljs-comment"># 所以要将数据调整为（样本数，int_channels, 30，25，25）30为降维后的维数，25为提取的pactch_size</span><br>Xtrain = Xtrain.transpose(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>,<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>Xtest  = Xtest.transpose(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>,<span class="hljs-number">3</span>, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after transpose: Xtrain shape: &#x27;</span>, Xtrain.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after transpose: Xtest  shape: &#x27;</span>, Xtest.shape)<br><br><br><span class="hljs-string">&quot;&quot;&quot;Training dataset&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrainDS</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.<span class="hljs-built_in">len</span> = Xtrain.shape[<span class="hljs-number">0</span>]<br>        self.x_data = torch.FloatTensor(Xtrain)<br>        self.y_data = torch.FloatTensor(ytrain)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> self.x_data[item], self.y_data[item]<br><br><br><span class="hljs-string">&quot;&quot;&quot;Testing dataset&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDS</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.<span class="hljs-built_in">len</span> = Xtest.shape[<span class="hljs-number">0</span>]<br>        self.x_data = torch.FloatTensor(Xtest)<br>        self.y_data = torch.FloatTensor(ytest)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> self.x_data[item], self.y_data[item]<br><br><span class="hljs-comment"># 创建DataLoader</span><br>trainset = TrainDS()<br>testset = TestDS()<br>train_loader = DataLoader(dataset=trainset,batch_size=<span class="hljs-number">256</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">8</span>)<br>test_loader = DataLoader(dataset=testset, batch_size=<span class="hljs-number">256</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">HSI data shape: (145, 145, 200)<br>Label shape: (145, 145)<br><br>... ...PCA... ...<br><br>... ... create data cubes ... ...<br>Data cube X shape:  (10249, 25, 25, 30)<br>Data cube y shape:  (10249,)<br><br>... ... create train &amp; <span class="hljs-built_in">test</span> data ... ...<br>Xtrain shape:  (3074, 25, 25, 30)<br>Xtest  shape:  (7175, 25, 25, 30)<br>ytrain  shape:  (3074,)<br>ytest  shape:  (7175,)<br>before transpose: Xtrain shape:  (3074, 25, 25, 30, 1)<br>before transpose: Xtest  shape:  (7175, 25, 25, 30, 1)<br>after transpose: Xtrain shape:  (3074, 1, 30, 25, 25)<br>after transpose: Xtest  shape:  (7175, 1, 30, 25, 25)<br></code></pre></td></tr></table></figure><h2 id="2-5-定义损失函数和优化器"><a href="#2-5-定义损失函数和优化器" class="headerlink" title="2.5 定义损失函数和优化器"></a>2.5 定义损失函数和优化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">epochs = <span class="hljs-number">100</span><br>criterion = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 使用Adam优化器</span><br>optimizer = optim.Adam(mynet.parameters(), lr=<span class="hljs-number">0.00037</span>)<br></code></pre></td></tr></table></figure><h2 id="定义训练和测试函数"><a href="#定义训练和测试函数" class="headerlink" title="定义训练和测试函数"></a>定义训练和测试函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">TrainLoss = []<br>TestLoss = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epoch</span>):<br>    mynet.train()<br>    train_loss = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> inputs, Labels <span class="hljs-keyword">in</span> train_loader:<br>        inputs = inputs.cuda()<br>        Labels = Labels.long().cuda()<br><br>        optimizer.zero_grad()               <span class="hljs-comment"># 梯度清零</span><br>        outputs = mynet(inputs)             <span class="hljs-comment"># 前向传播</span><br>        loss = criterion(outputs, Labels)   <span class="hljs-comment"># 计算损失</span><br>        loss.backward()                     <span class="hljs-comment"># 反向传播</span><br>        optimizer.step()                    <span class="hljs-comment"># 更新权重</span><br>        train_loss += loss.item()           <span class="hljs-comment"># 将每个batch的损失加和，得到这一个epoch的损失</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch:&#123;&#125;\tTraining Loss:&#123;:0.6f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epoch, train_loss))<br>    TrainLoss.append(train_loss)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">val</span>(<span class="hljs-params">epoch</span>):<br>    mynet.<span class="hljs-built_in">eval</span>()<br>    val_loss = <span class="hljs-number">0</span><br>    gt_labels = []<br>    pred_labels = []<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> inputs, labels <span class="hljs-keyword">in</span> test_loader:<br>            inputs = inputs.cuda()<br>            labels = labels.long().cuda()<br>            outputs = mynet(inputs)<br>            preds = torch.argmax(outputs,<span class="hljs-number">1</span>)<br>            gt_labels.append(labels.cpu().data.numpy())<br>            pred_labels.append(preds.cpu().data.numpy())<br>            loss = criterion(outputs, labels)<br>            val_loss += loss.item()<br>        <span class="hljs-comment"># 将每个batch的pred and gt进行级联，得到这一轮epoch的结果进行计算acc</span><br>        pred_labels = np.concatenate(pred_labels)<br>        gt_labels = np.concatenate(gt_labels)<br>        acc = np.<span class="hljs-built_in">sum</span>(gt_labels==pred_labels)/<span class="hljs-built_in">len</span>(pred_labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch:&#123;&#125;\tValidation Loss: &#123;:.6f&#125;, Accuracy: &#123;:6f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epoch, val_loss, acc))<br>        TestLoss.append(val_loss)<br>        <br><br></code></pre></td></tr></table></figure><h2 id="2-6-结果处理"><a href="#2-6-结果处理" class="headerlink" title="2.6 结果处理"></a>2.6 结果处理</h2><p>采取训练一轮验证一轮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs+<span class="hljs-number">1</span>):<br>    train(epoch)<br>    val(epoch)<br>   <br>plt.plot(np.arange(<span class="hljs-built_in">len</span>(TrainLoss)), TrainLoss, color=<span class="hljs-string">&#x27;blue&#x27;</span>, label=<span class="hljs-string">&#x27;train_loss&#x27;</span>)<br>plt.plot(np.arange(<span class="hljs-built_in">len</span>(TestLoss)), TestLoss, color=<span class="hljs-string">&#x27;red&#x27;</span>, label=<span class="hljs-string">&#x27;val_loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;epoches&#x27;</span>)<br><span class="hljs-comment"># 显示不同图形的图例</span><br>plt.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">......<br>Epoch:90Training Loss:0.073813<br>Epoch:90Validation Loss: 0.244632, Accuracy: 0.997352<br>Epoch:91Training Loss:0.037750<br>Epoch:91Validation Loss: 0.329399, Accuracy: 0.997213<br>Epoch:92Training Loss:0.086547<br>Epoch:92Validation Loss: 0.474686, Accuracy: 0.996794<br>Epoch:93Training Loss:0.101807<br>Epoch:93Validation Loss: 0.654322, Accuracy: 0.995958<br>Epoch:94Training Loss:0.057064<br>Epoch:94Validation Loss: 0.554149, Accuracy: 0.996098<br>Epoch:95Training Loss:0.046592<br>Epoch:95Validation Loss: 0.422141, Accuracy: 0.996934<br>Epoch:96Training Loss:0.045168<br>Epoch:96Validation Loss: 0.383599, Accuracy: 0.996794<br>Epoch:97Training Loss:0.039711<br>Epoch:97Validation Loss: 0.569012, Accuracy: 0.995958<br>Epoch:98Training Loss:0.063358<br>Epoch:98Validation Loss: 0.436542, Accuracy: 0.996516<br>Epoch:99Training Loss:0.028194<br>Epoch:99Validation Loss: 0.494709, Accuracy: 0.995540<br>Epoch:100Training Loss:0.087549<br>Epoch:100Validation Loss: 0.553651, Accuracy: 0.995122<br></code></pre></td></tr></table></figure><p><img src="output.png"></p><p>这里我想计算aa,oa,kappa,采取训练完100轮再测试</p><p>需要改写一下val模型测试函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">val_model</span>():<br>    mynet.<span class="hljs-built_in">eval</span>()<br>    pred_labels = []<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> inputs, labels <span class="hljs-keyword">in</span> test_loader:<br>            inputs = inputs.cuda()<br>            outputs = mynet(inputs)<br>            preds = torch.argmax(outputs,<span class="hljs-number">1</span>)<br>            pred_labels.append(preds.cpu().data.numpy())<br>        pred_labels = np.concatenate(pred_labels)<br>        pred_labels = np.array(pred_labels)<br>        oa, each_acc, aa, kappa = reports(pred_labels, ytest)<br>    <span class="hljs-keyword">return</span> oa, each_acc, aa, kappa, pred_labels<br>    <br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoches+<span class="hljs-number">1</span>):<br>train(epoch)<br>    <br><br>oa, each_acc, aa, kappa, outputs = val_model()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;oa:<span class="hljs-subst">&#123;oa&#125;</span>\naa:<span class="hljs-subst">&#123;aa&#125;</span>\nkappa:<span class="hljs-subst">&#123;kappa&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(each_acc)<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">oa:0.9951219512195122<br>aa:0.9962599807682442<br>kappa:0.9944442812235046<br>[1.         0.99013807 0.97920277 1.         0.99164345 1.<br> 1.         1.         1.         1.         0.99941003 0.98090692<br> 1.         0.99885845 1.         1.        ]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HSI_classification</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客+部署到github</title>
    <link href="/2023/05/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <url>/2023/05/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客-部署到github"><a href="#Hexo搭建个人博客-部署到github" class="headerlink" title="Hexo搭建个人博客+部署到github"></a>Hexo搭建个人博客+部署到github</h1><img src="/2023/05/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E9%83%A8%E7%BD%B2%E5%88%B0github/2.png" class="" title="zheshi"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">sdfasdf <br>sdfasdf <span class="hljs-keyword">as</span><br>dfg<br>dfgs <br>gsdfg<br>s df<br>g s<br>dfg<br>sdfg<br> sdf<br> gds<br> fg <br> sdfg sdf<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
